/* config.h.in.  Generated from configure.ac by autoheader.  */


#if defined(__MIC__)
#define ARCH_MIC 1
#elif defined(__INTEL_COMPILER) || defined(__i386__) || defined(__x86_64__) || \
      defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
#define ARCH_INTEL 1
#elif defined(__arm__) || defined(_M_ARM) || defined(__aarch64__)
#define ARCH_ARM 1
#elif defined(_ARCH_PPC) || defined(_ARCH_PPC64)
#define ARCH_PPC 1
#endif


/* Default configuration. */
#undef DEFAULT_CONFIG

/* Define if blis is to be used. */
#undef HAVE_BLIS

/* define if the compiler supports basic C++11 syntax */
#undef HAVE_CXX11

/* Define to 1 if you have the <dlfcn.h> header file. */
#undef HAVE_DLFCN_H

/* Define to 1 if you have the <inttypes.h> header file. */
#undef HAVE_INTTYPES_H

/* Define to 1 if you have the <memory.h> header file. */
#undef HAVE_MEMORY_H

/* Define to 1 if you have the <stdint.h> header file. */
#undef HAVE_STDINT_H

/* Define to 1 if you have the <stdlib.h> header file. */
#undef HAVE_STDLIB_H

/* Define to 1 if you have the <strings.h> header file. */
#undef HAVE_STRINGS_H

/* Define to 1 if you have the <string.h> header file. */
#undef HAVE_STRING_H

/* Define to 1 if you have the <sys/stat.h> header file. */
#undef HAVE_SYS_STAT_H

/* Define to 1 if you have the <sys/types.h> header file. */
#undef HAVE_SYS_TYPES_H

/* Define to 1 if you have the <unistd.h> header file. */
#undef HAVE_UNISTD_H

/* Define to the sub-directory where libtool stores uninstalled libraries. */
#undef LT_OBJDIR

/* Name of package */
#undef PACKAGE

/* Define to the address where bug reports for this package should be sent. */
#undef PACKAGE_BUGREPORT

/* Define to the full name of this package. */
#undef PACKAGE_NAME

/* Define to the full name and version of this package. */
#undef PACKAGE_STRING

/* Define to the one symbol short name of this package. */
#undef PACKAGE_TARNAME

/* Define to the home page for this package. */
#undef PACKAGE_URL

/* Define to the version of this package. */
#undef PACKAGE_VERSION

/* Define to 1 if you have the ANSI C header files. */
#undef STDC_HEADERS

/* The top source directory. */
#undef TOPDIR

/* Use a thread barrier based on C++11 condition variables */
#undef USE_CXX11_BARRIER

/* Use C++11 std::mutex for locking */
#undef USE_CXX11_MUTEX

/* Use a spin-lock based on C++11 atomics */
#undef USE_CXX11_SPINLOCK

/* Use C++11 std::thread */
#undef USE_CXX11_THREADS

/* Use omp_lock for locking */
#undef USE_OMP_LOCK

/* Use OpenMP for threading */
#undef USE_OPENMP_THREADS

/* Use OSSpinLock for locking */
#undef USE_OSX_SPINLOCK

/* Use pthread_barrier for thread barriers */
#undef USE_PTHREAD_BARRIER

/* Use pthread_mutex for locking */
#undef USE_PTHREAD_MUTEX

/* Use pthread_spinlock for locking */
#undef USE_PTHREAD_SPINLOCK

/* Use pthreads for threading */
#undef USE_PTHREAD_THREADS

/* Use a spin-loop based barrier */
#undef USE_SPIN_BARRIER

/* Version number of package */
#undef VERSION

/* Define to the equivalent of the C99 'restrict' keyword, or to
   nothing if this is not supported.  Do not define if restrict is
   supported directly.  */
#undef restrict
/* Work around a bug in Sun C++: it does not support _Restrict or
   __restrict__, even though the corresponding Sun C compiler ends up with
   "#define restrict _Restrict" or "#define restrict __restrict__" in the
   previous line.  Perhaps some future version of Sun C++ will work with
   restrict; if so, hopefully it defines __RESTRICT like Sun C does.  */
#if defined __SUNPRO_CC && !defined __RESTRICT
# define _Restrict
# define __restrict__
#endif
